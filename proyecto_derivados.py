#!/usr/bin/env python
# coding: utf-8

# In[17]:


import pandas as pd
import numpy as np
import json
from datetime import date, timedelta
from sodapy import Socrata
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import time
import urllib.request
from selenium.webdriver.common.keys import Keys


# In[ ]:


date_2year_ago = (date.today() - timedelta(days=2*365))
date_today = date.today()
print(str(date_2year_ago) + ' ' + str(date_today))


# In[ ]:


# Desde el 2019 01 01
url_tasa_spot = 'https://www.datos.gov.co/resource/mcec-87by.json'
tasa_spot = pd.read_json(url_tasa_spot)
f_splt = tasa_spot['vigenciadesde'].str.split('-')
data = f_splt.to_list()
names = ['anio', 'mes', 'dia']
new_df = pd.DataFrame(data, columns=names)
new_df.groupby(['anio', 'mes']).count()


# In[ ]:


# Enter the information from those sections here
socrata_domain = 'datos.gov.co'
socrata_dataset_identifier = 'mcec-87by'

# App Tokens can be generated by creating an account at https://opendata.socrata.com/signup
# Tokens are optional (`None` can be used instead), though requests will be rate limited.
#
# If you choose to use a token, run the following command on the terminal (or add it to your .bashrc)
# $ export SODAPY_APPTOKEN=<token>
credentials = json.load(open('credentials.json'))
socrata_token = credentials['TOKEN']


# In[ ]:


client = Socrata(socrata_domain, socrata_token)
print("Domain: {domain:}\nSession: {session:}\nURI Prefix: {uri_prefix:}".format(**client.__dict__))


# In[ ]:


results = client.get(socrata_dataset_identifier)
df = pd.DataFrame.from_dict(results)
df_splt = df['vigenciadesde'].str.split('-')
data2 = df_splt.to_list()
new_df2 = pd.DataFrame(data2, columns=names)
new_df2.groupby(['anio', 'mes']).count()


# In[2]:


# Segundo dataframe
options = webdriver.ChromeOptions()
options.add_argument('--start-maximized')
options.add_argument('--disable-extensions')


# In[23]:


def remove_duplicate_list(lst):
  return list(dict.fromkeys(lst))

driver_path = r'C:\Users\Efra\Downloads\chromedriver_win32\chromedriver.exe'
driver = webdriver.Chrome(driver_path, options = options)
driver.get('https://totoro.banrep.gov.co/analytics/saw.dll?Portal&PortalPath=%2Fshared%2FDashboards_T%2FD_Estad%C3%ADsticas%2FEstad%C3%ADsticas&NQUser=publico&NQPassword=publico123&lang=es&page=Tasas%20de%20inter%C3%A9s%20y%20sector%20financiero&pagina=Otras%20tasas%20de%20inter%C3%A9s')

WebDriverWait(driver, 15)
driver.switch_to.frame(driver.find_element_by_id('frame_dashboard'))

WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH,
                                      '/html/body/div[7]/div/div/table/tbody/tr/td[1]/div/div/table/tbody/tr/td[2]/div/table/tbody/tr/td[2]/table/tbody/tr/td/div')))\
    .click()

#WebDriverWait(driver, 30)
#print(driver.find_elements_by_class_name('sui-treeview-item-toggle-collapsed'))
#driver.find_elements_by_class_name('sui-treeview-item-toggle-collapsed')[1].click()
WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.CLASS_NAME,
                                      'sui-treeview-item-toggle-collapsed')))
driver.find_elements_by_class_name('sui-treeview-item-toggle-collapsed')[1].click()
print(len(driver.find_elements_by_xpath("//a[@href]")))
href = driver.find_elements_by_xpath("//a[@href]")
href_list = []
for i in href:
    try:
        contains = str(i.get_attribute('href')).replace('%20', '').upper()
        #print(contains)
        if('IBR_PLAZOOVERNIGHTNOMINALPARAUNRANGODEFECHASDADOIQY' in contains 
           or 'IBR_PLAZOUNMESNOMINALPARAUNRANGODEFECHASDADOIQY' in contains
           or 'IBR_PLAZOTRESMESESNOMINALPARAUNRANGODEFECHASDADOIQY' in contains
           or 'IBR_PLAZOMESVENCIDONOMINALPARAUNRANGODEFECHASDADOIQY' in contains
           or 'IBR_PLAZOSEISMESESNOMINALPARAUNRANGODEFECHASDADOIQY' in contains
           and 'DOWNLOAD' in contains):
            src = i.get_attribute('href')
            href_list.append(src)
            #print('saca algo ' + src)
    except:
        print('la cagamos')

href_list = remove_duplicate_list(href_list)
print(len(href_list))
for j in href_list:
    try:
        driver.find_element_by_tag_name('body').send_keys(Keys.CONTROL + 't') 
        driver.get(j)
        print('descargue ' + j)
    except AssertionError as error:
        print(error)
        print('error link')
        
driver.close()


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:




